#include "OVIACommon.h"

#pragma once

#ifndef OVIA_W64Common_H
#define OVIA_W64Common_H

#ifdef __cplusplus
extern "C" {
#endif
    
    enum W64SpeakerMask {
        WAVFrontRight         = 0x1,
        WAVFrontLeft          = 0x2,
        WAVFrontCenter        = 0x4,
        WAVLFE                = 0x8,
        WAVBackLeft           = 0x10,
        WAVBackRight          = 0x20,
        WAVFrontLeftCenter    = 0x40,
        WAVFrontRightCenter   = 0x80,
        WAVBackCenter         = 0x100,
        WAVSideLeft           = 0x200,
        WAVSideRight          = 0x400,
        WAVTopCenter          = 0x800,
        WAVTopFrontLeft       = 0x1000,
        WAVTopFrontCenter     = 0x2000,
        WAVTopFrontRight      = 0x4000,
        WAVTopBackLeft        = 0x8000,
        WAVTopBackCenter      = 0x10000,
        WAVTopBackRight       = 0x20000,
    };
    
    typedef struct W64Options {
        uint64_t SpeakerMask;
        uint16_t CompressionFormat;
        uint16_t BlockAlignment;
        uint16_t NumChannels;
        uint32_t SampleRate;
        uint32_t ByteRate;
        uint32_t BlockAlign;
        uint16_t BitDepth;
        uint16_t ValidBitsPerSample;
    } W64Options;
    
    static const uint8_t W64_RIFF_GUIDString[] = {
        0x72,0x69,0x66,0x66,0x2D,0x2E,0x91,0x2D,0xCF,0x11,0x2D,0xA5,0xD6,0x2D,0x28,0xDB,0x04,0xC1,0x00,0x00,0x00
    };
    
    static const uint8_t W64_WAVE_GUIDString[] = {
        0x77,0x61,0x76,0x65,0x2D,0xF3,0xAC,0x2D,0xD3,0x11,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_FMT_GUIDString[] = {
        0x66,0x6D,0x74,0x20,0x2D,0xF3,0xAC,0x2D,0xD3,0x11,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_DATA_GUIDString[] = {
        0x64,0x61,0x74,0x61,0x2D,0xF3,0xAC,0x2D,0xD3,0x11,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_LEVL_GUIDString[] = { // aka Peak Envelope Chunk
        0x6A,0x75,0x6E,0x6B,0x2D,0xF3,0xAC,0x2D,0xD3,0x11,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_BEXT_GUIDString[] = {
        0x62,0x65,0x78,0x74,0x2D,0xf3,0xAC,0x2D,0xD3,0xAA,0x2D,0xD1,0x8C,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_FACT_GUIDString[] = {
        0x66,0x61,0x63,0x74,0x2D,0xF3,0xAC,0x2D,0xD3,0x11,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_JUNK_GUIDString[] = {
        0x6B,0x6E,0x75,0x6A,0x2D,0xAC,0xF3,0x2D,0x11,0xD3,0x2D,0x8C,0xD1,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_MRKR_GUIDString[] = { // MARKER
        0xAB,0xF7,0x62,0x56,0x2D,0x39,0x45,0x2D,0x11,0xD2,0x2D,0x86,0xC7,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_SUMM_GUIDString[] = { // SUMMARY LIST
        0x92,0x5F,0x94,0xBC,0x2D,0x52,0x5A,0x2D,0x11,0xD2,0x2D,0x86,0xDC,0x2D,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const uint8_t W64_LIST_GUIDString[] = {
        0x74,0x73,0x69,0x6C,0x2D,0x91,0x2F,0x2D,0x11,0xCF,0x2D,0xA5,0xD6,0x2D,0x28,0xDB,0x04,0xC1,0x00,0x00,0x00
    };
    
    void    *W64Options_Init(void);
    
    uint64_t CalculateW64ByteRate(uint64_t NumChannels, uint8_t BitDepth, uint64_t SampleRate);
    
    uint64_t CalculateW64BlockAlign(uint64_t NumChannels, uint8_t BitDepth);
    
    void     W64Options_Deinit(void *Options);
    
#ifdef __cplusplus
}
#endif

#endif /* OVIA_W64Common_H */
