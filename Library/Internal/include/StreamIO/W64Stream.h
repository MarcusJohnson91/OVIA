#include "libPCM.h"

#ifndef LIBPCM_W64COMMON_H
#define LIBPCM_W64COMMON_H

#pragma once

#ifdef __cplusplus
extern "C" {
#endif
    
    typedef struct W64Header {
        uint16_t FormatType;
        uint16_t Channels;
        uint32_t SampleRate;
        uint32_t ByteRate;
        uint16_t BlockAlign;
        uint16_t BitDepth;
        uint64_t DataSize;
        uint64_t NumSamples; // Channel independent
    };
    
    enum W64ChunkIDs {
        W64_RIFF = 0x72696666,
        W64_WAVE = 0x77617665,
        W64_FMT  = 0x666D7420,
        W64_DATA = 0x64617461,
        W64_LEVL = 0x6C76656C,
        W64_JUNK = 0x6B6E756A,
        W64_BEXT = 0x74786562,
        W64_FACT = 0x74636166,
        W64_LIST = 0x7473696C,
        W64_MRKR = 0xABF76256,
        W64_SUMM = 0x925F94BC,
    };
    
    static const char RIFF_UUID[BitIOUUIDSize] = {
        0x66,0x66,0x69,0x72,0x45,0x91,0x2E,0x45,0x11,0xCF,0x45,0xA5,0xD6,0x45,0x28,0xDB,0x04,0xC1,0x00,0x00,0x00
    };
    
    // Example UUID: 12 3e 45 67 - e8 9b - 12 d3 - a4 56 - 42 66 55 44 00 00
    
    static const char WAVE_UUID[BitIOUUIDSize] = {
        0x77,0x61,0x76,0x65,0x45,0xF3,0xAC,0x45,0xD3,0x11,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char FMT_UUID[BitIOUUIDSize] = {
        0x66,0x6D,0x74,0x20,0x45,0xF3,0xAC,0x45,0xD3,0x11,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char DATA_UUID[BitIOUUIDSize] = {
        0x64,0x61,0x74,0x61,0x45,0xF3,0xAC,0x45,0xD3,0x11,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char LEVL_UUID[BitIOUUIDSize] = { // aka Peak Envelope Chunk
        0x6C,0x76,0x65,0x6C,0x45,0xAC,0xF3,0x45,0x11,0xD3,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char JUNK_UUID[BitIOUUIDSize] = {
        0x6B,0x6E,0x75,0x6A,0x45,0xAC,0xF3,0x45,0x11,0xD3,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char BEXT_UUID[BitIOUUIDSize] = {
        0x74,0x78,0x65,0x62,0x45,0xAC,0xF3,0x45,0x11,0xD3,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char FACT_UUID[BitIOUUIDSize] = {
        0x74,0x63,0x61,0x66,0x45,0xAC,0xF3,0x45,0x11,0xD3,0x45,0x8C,0xD1,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char LIST_UUID[BitIOUUIDSize] = {
        0x74,0x73,0x69,0x6C,0x45,0x91,0x2F,0x45,0x11,0xCF,0x45,0xA5,0xD6,0x45,0x28,0xDB,0x04,0xC1,0x00,0x00,0x00
    };
    
    static const char MARKER_UUID[BitIOUUIDSize] = { // MARKER
        0xAB,0xF7,0x62,0x56,0x45,0x39,0x2D,0x45,0x11,0xD2,0x45,0x86,0xC7,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    static const char SUMMARYLIST_UUID[BitIOUUIDSize] = { // SUMMARY LIST
        0x92,0x5F,0x94,0xBC,0x45,0x52,0x5A,0x45,0x11,0xD2,0x45,0x86,0xDC,0x45,0x00,0xC0,0x4F,0x8E,0xDB,0x8A,0x00
    };
    
    void ParseW64FMTChunk(BitInput *BitI, W64Header *W64);
    
    void ParseW64BEXTChunk(BitInput *BitI, W64Header *W64);
    
#ifdef __cplusplus
}
#endif

#endif /* LIBPCM_W64COMMON_H */
